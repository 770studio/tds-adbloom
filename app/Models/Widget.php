<?php

namespace App\Models;

use Eloquent;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Support\Carbon;

/**
 * App\Models\Widget
 *
 * @property Partner $partner;
 * @property int $id
 * @property string $short_id
 * @property int $dynamic_or_static
 * @property int $partner_id
 * @property object|null $platforms
 * @property object|null $countries
 * @property object|null $tags
 * @property Carbon|null $created_at
 * @property Carbon|null $updated_at
 * @property int $enable_grl_inventory
 * @property string|null $redirect_url
 * @property int $showHead
 * @property string|null $partnerName
 * @property string|null $fontColor
 * @property string|null $fontSize
 * @property string|null $buttonBackground
 * @property string|null $rewardBackground
 * @property string|null $fontFamily
 * @property string|null $inAppCurrencySymbolUrl
 * @property string|null $cta
 * @property string|null $textColor
 * @property string|null $headingFontFamily
 * @property string|null $ctaFontFamily
 * @property string|null $bodyFontFamily
 * @property string $headingfontWeight
 * @property string $ctaFontWeight
 * @property string $bodyFontWeight
 * @property-read Partner $Partner
 * @property-read Collection|Opportunity[] $opportunities
 * @property-read int|null $opportunities_count
 * @method static Builder|BaseModelWithAutoGeneratedShortId findByShortId($short_id)
 * @method static Builder|Widget newModelQuery()
 * @method static Builder|Widget newQuery()
 * @method static Builder|Widget query()
 * @method static Builder|Widget whereBodyFontFamily($value)
 * @method static Builder|Widget whereBodyFontWeight($value)
 * @method static Builder|Widget whereCountries($value)
 * @method static Builder|Widget whereCreatedAt($value)
 * @method static Builder|Widget whereCta($value)
 * @method static Builder|Widget whereCtaFontFamily($value)
 * @method static Builder|Widget whereCtaFontWeight($value)
 * @method static Builder|Widget whereDynamicOrStatic($value)
 * @method static Builder|Widget whereEnableGrlInventory($value)
 * @method static Builder|Widget whereFontColor($value)
 * @method static Builder|Widget whereFontFamily($value)
 * @method static Builder|Widget whereFontSize($value)
 * @method static Builder|Widget whereHeadingFontFamily($value)
 * @method static Builder|Widget whereHeadingfontWeight($value)
 * @method static Builder|Widget whereId($value)
 * @method static Builder|Widget whereInAppCurrencySymbolUrl($value)
 * @method static Builder|Widget wherePartnerId($value)
 * @method static Builder|Widget wherePartnerName($value)
 * @method static Builder|Widget wherePlatforms($value)
 * @method static Builder|Widget whereButtonBackground($value)
 * @method static Builder|Widget whereRedirectUrl($value)
 * @method static Builder|Widget whereRewardBackground($value)
 * @method static Builder|Widget whereShortId($value)
 * @method static Builder|Widget whereShowHead($value)
 * @method static Builder|Widget whereTags($value)
 * @method static Builder|Widget whereTextColor($value)
 * @method static Builder|Widget whereUpdatedAt($value)
 * @mixin Eloquent
 * @property string|null $buttonTextColor
 * @property string|null $rewardTextColor
 * @property string $inAppCurrencySymbolUrl_type
 * @method static Builder|Widget whereButtonTextColor($value)
 * @method static Builder|Widget whereInAppCurrencySymbolUrlType($value)
 * @method static Builder|Widget whereRewardTextColor($value)
 */
class Widget extends BaseModelWithAutoGeneratedShortId
{
    use HasFactory;


    protected $casts = [
        'platforms' => 'object',
        'tags' => 'object',
        'countries' => 'object',
    ];

    public function Partner()
    {
        return $this->belongsTo('App\Models\Partner');
    }


    public function opportunities()
    {
        return $this->belongsToMany(Opportunity::class, 'widget_opportunity', 'widget_id', 'opportunity_id');
    }

    public function isDynamic()
    {
        return $this->dynamic_or_static == 0;
    }

    public function isStatic()
    {
        return $this->dynamic_or_static == 1;
    }


}
