<?php

namespace App\Models;

use App\Models\Infrastructure\Gender;
use App\Models\Infrastructure\Platform;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Str;

class Opportunity extends BaseModelWithAutoGeneratedShortId
{
    use HasFactory;

    public const TYPES = ['offer' => 'offer', 'survey' => 'survey'];
    //public const DEFAULT_URL_MACRO = "&aff_id={partnerId}&aff_click_id={clickId}&aff_unique1={userId}&aff_unique2
    //={birthdate}&aff_unique3={email}&aff_sub2={country}&aff_sub4={gender}&aff_sub5={widgetId}&source=widget";
    public const DEFAULT_URL_MACRO = "https://trk.adbloom.co/aff_c?offer_id={externalId}&aff_id={partnerId}&aff_click_id={clickId}&aff_unique1={userId}&aff_unique2={birthdate}&aff_unique3={email}&aff_sub2={country}&aff_sub4={gender}&aff_sub5={widgetId}&source=widget";

    protected $guarded = false;
    protected $casts = [
        'targeting_params' => 'object',
        'platforms' => 'object',
        'genders' => 'object',
        'countries' => 'object',
        'payout' => 'decimal:2'

    ];
    /**
     * The accessors to append to the model's array form.
     *
     * @var array
     */
    protected $appends = ['reward'];


    /**
     * The "booted" method of the model.
     *
     * @return void
     */
    protected static function booted()
    {
        static::saving(function ($opportunity) {
            if (Platform::equalsToAll($opportunity->platforms)) {
                $opportunity->platforms = null;
            }

            if (Gender::equalsToAll($opportunity->genders)) {
                $opportunity->genders = null;
            }
        });
    }

    /**
     * @return BelongsTo
     */
    public function Client()
    {
        return $this->belongsTo('App\Models\Client');
    }

    public function conversions()
    {
        return $this->hasMany('App\Models\Conversion', 'Stat_offer_id', 'external_id');
    }

    public function widgets()
    {
        return $this->belongsToMany(Widget::class, 'widget_opportunity',  'opportunity_id', 'widget_id');
    }

    /**
     * Get all of the opportunity's tags.
     */
    public function tags()
    {
        return $this->morphToMany(Tag::class, 'taggable');
    }

    public function isSurvey()
    {
        return $this->type == self::TYPES['survey'];
    }

    public function getAgeFromTo()
    {
        return $this->age_from || $this->age_to
            ? [
                'from' => $this->age_from,
                'to' => $this->age_to,
            ]
            : null;


    }

    public function getComputedLinkAttribute()
    {
        return $this->use_default_macros
            ? $this->macroLink()
            : $this->link;
    }

    private function macroLink(): string
    {
        return Str::replace('{externalId}', $this->external_id, self::DEFAULT_URL_MACRO);

        /*       return UrlHelper::appendTo(
                   $this->link, self::DEFAULT_URL_MACRO
               );*/
    }

    public function getRewardAttribute()
    {
        if (isset($this->mixin)) {
            return $this->payout; //   for mixin it has already gone through calculation
        }

        if ($partner = $this->getPartner()) {
            return $partner->calulateReward($this->payout);
        }

        return $this->payout;
    }

    public function getPartner(): ?Partner
    {
        /** @var Widget $widget */
        return ($widget = optional($this->pivot)->pivotParent)
            ? $widget->partner
            : null;

    }

    public function isIncentive(): bool
    {
        return (bool)$this->incentive;
    }

    public function isRewarding(): bool
    {
        return $this->isIncentive() &&
            optional($this->getPartner())->isIncentive();
    }


}
