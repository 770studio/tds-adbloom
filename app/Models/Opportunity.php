<?php

namespace App\Models;

use App\Helpers\UrlHelper;
use App\Models\Infrastructure\Gender;
use App\Models\Infrastructure\Platform;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Opportunity extends BaseModelWithAutoGeneratedShortId
{
    use HasFactory;

    protected $guarded = false;
    protected $casts = [
        'targeting_params' => 'object',
        'platforms' => 'object',
        'genders' => 'object',
        'countries' => 'object',
        'payout' => 'decimal:2'

    ];
    public const TYPES = ['offer' => 'offer', 'survey' => 'survey'];
    public const DEFAULT_URL_MACRO = "&aff_id={partnerId}&aff_click_id={clickId}&aff_unique1={userId}&aff_unique2={birthdate}&aff_unique3={email}&aff_sub2={country}&aff_sub4={gender}&aff_sub5={widgetId}&source=widget";

    /**
     * The "booted" method of the model.
     *
     * @return void
     */
    protected static function booted()
    {
        static::saving(function ($opportunity) {
            if (Platform::equalsToAll($opportunity->platforms)) {
                $opportunity->platforms = null;
            }

            if (Gender::equalsToAll($opportunity->genders)) {
                $opportunity->genders = null;
            }
        });
    }

    /**
     * @return BelongsTo
     */
    public function Client()
    {
        return $this->belongsTo('App\Models\Client');
    }

    public function conversions()
    {
        return $this->hasMany('App\Models\Conversion', 'Stat_offer_id', 'external_id');
    }

    public function widgets()
    {
        return $this->belongsToMany(Widget::class, 'widget_opportunity',  'opportunity_id', 'widget_id');
    }

    /**
     * Get all of the opportunity's tags.
     */
    public function tags()
    {
        return $this->morphToMany(Tag::class, 'taggable');
    }

    public function isSurvey()
    {
        return $this->type == self::TYPES['survey'];
    }

    public function getAgeFromTo()
    {
        return $this->age_from || $this->age_to
            ? [
                'from' => $this->age_from,
                'to' => $this->age_to,
            ]
            : null;


    }

    public function getComputedLink()
    {
        return $this->use_default_macros
            ? $this->macroLink()
            : $this->link;
    }

    private function macroLink(): string
    {
        return UrlHelper::appendTo(
            $this->link, self::DEFAULT_URL_MACRO
        );
    }


}
