<?php

namespace App\Models;

use App\Models\Infrastructure\Gender;
use App\Models\Infrastructure\Platform;
use Eloquent;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Carbon;
use Illuminate\Support\Str;

/**
 * App\Models\Opportunity
 *
 * @property int $id
 * @property string $short_id
 * @property string $external_id
 * @property string $name
 * @property string $type
 * @property Carbon|null $created_at
 * @property Carbon|null $updated_at
 * @property int $client_id
 * @property string|null $image
 * @property string|null $link
 * @property string|null $description
 * @property mixed $payout
 * @property string $currency
 * @property int $timeToComplete
 * @property string|null $call_to_action
 * @property int|null $incentive
 * @property object|null $platforms
 * @property object|null $countries
 * @property object|null $genders
 * @property object|null $targeting_params
 * @property int|null $age_from
 * @property int|null $age_to
 * @property int $use_default_macros
 * @property string|null $incentive_call_to_action
 * @property-read Client $Client
 * @property-read Collection|Conversion[] $conversions
 * @property-read int|null $conversions_count
 * @property-read mixed $computed_link
 * @property-read mixed $reward
 * @property-read Collection|Tag[] $tags
 * @property-read int|null $tags_count
 * @property-read Collection|Widget[] $widgets
 * @property-read int|null $widgets_count
 * @method static Builder|BaseModelWithAutoGeneratedShortId findByShortId($short_id)
 * @method static Builder|Opportunity newModelQuery()
 * @method static Builder|Opportunity newQuery()
 * @method static Builder|Opportunity query()
 * @method static Builder|Opportunity whereAgeFrom($value)
 * @method static Builder|Opportunity whereAgeTo($value)
 * @method static Builder|Opportunity whereCallToAction($value)
 * @method static Builder|Opportunity whereClientId($value)
 * @method static Builder|Opportunity whereCountries($value)
 * @method static Builder|Opportunity whereCreatedAt($value)
 * @method static Builder|Opportunity whereCurrency($value)
 * @method static Builder|Opportunity whereDescription($value)
 * @method static Builder|Opportunity whereExternalId($value)
 * @method static Builder|Opportunity whereGenders($value)
 * @method static Builder|Opportunity whereId($value)
 * @method static Builder|Opportunity whereImage($value)
 * @method static Builder|Opportunity whereIncentive($value)
 * @method static Builder|Opportunity whereIncentiveCallToAction($value)
 * @method static Builder|Opportunity whereLink($value)
 * @method static Builder|Opportunity whereName($value)
 * @method static Builder|Opportunity wherePayout($value)
 * @method static Builder|Opportunity wherePlatforms($value)
 * @method static Builder|Opportunity whereShortId($value)
 * @method static Builder|Opportunity whereTargetingParams($value)
 * @method static Builder|Opportunity whereTimeToComplete($value)
 * @method static Builder|Opportunity whereType($value)
 * @method static Builder|Opportunity whereUpdatedAt($value)
 * @method static Builder|Opportunity whereUseDefaultMacros($value)
 * @mixin Eloquent
 */
class Opportunity extends BaseModelWithAutoGeneratedShortId
{
    use HasFactory;

    public const TYPES = ['offer' => 'offer', 'survey' => 'survey'];
    //public const DEFAULT_URL_MACRO = "&aff_id={partnerId}&aff_click_id={clickId}&aff_unique1={userId}&aff_unique2
    //={birthdate}&aff_unique3={email}&aff_sub2={country}&aff_sub4={gender}&aff_sub5={widgetId}&source=widget";
    public const DEFAULT_URL_MACRO = "https://trk.adbloom.co/aff_c?offer_id={externalId}&aff_id={partnerId}&aff_click_id={clickId}&aff_unique1={userId}&aff_unique2={birthdate}&aff_unique3={email}&aff_sub2={country}&aff_sub4={gender}&aff_sub5={widgetId}&source=widget";

    protected $guarded = false;
    protected $casts = [
        'targeting_params' => 'object',
        'platforms' => 'object',
        'genders' => 'object',
        'countries' => 'object',
        //'payout' => 'decimal:2'

    ];
    /**
     * The accessors to append to the model's array form.
     *
     * @var array
     */
    protected $appends = ['reward'];


    /**
     * The "booted" method of the model.
     *
     * @return void
     */
    protected static function booted()
    {
        static::saving(function ($opportunity) {
            if (Platform::equalsToAll($opportunity->platforms)) {
                $opportunity->platforms = null;
            }

            if (Gender::equalsToAll($opportunity->genders)) {
                $opportunity->genders = null;
            }
        });
    }

    /**
     * @return BelongsTo
     */
    public function Client()
    {
        return $this->belongsTo('App\Models\Client');
    }

    public function conversions()
    {
        return $this->hasMany('App\Models\Conversion', 'Stat_offer_id', 'external_id');
    }

    public function widgets()
    {
        return $this->belongsToMany(Widget::class, 'widget_opportunity',  'opportunity_id', 'widget_id');
    }

    /**
     * Get all of the opportunity's tags.
     */
    public function tags()
    {
        return $this->morphToMany(Tag::class, 'taggable');
    }

    public function isSurvey()
    {
        return $this->type == self::TYPES['survey'];
    }

    public function getAgeFromTo()
    {
        return $this->age_from || $this->age_to
            ? [
                'from' => $this->age_from,
                'to' => $this->age_to,
            ]
            : null;


    }

    public function getComputedLinkAttribute()
    {
        return $this->use_default_macros
            ? $this->macroLink()
            : $this->link;
    }

    private function macroLink(): string
    {
        return Str::replace('{externalId}', $this->external_id, self::DEFAULT_URL_MACRO);

        /*       return UrlHelper::appendTo(
                   $this->link, self::DEFAULT_URL_MACRO
               );*/
    }

    public function getRewardAttribute()
    {
        if (isset($this->mixin)) {
            return $this->payout; //   for mixin it has already gone through calculation
        }

        if ($partner = $this->getPartner()) {
            return $partner->calulateReward($this->payout);
        }

        return $this->payout;
    }

    public function getPartner(): ?Partner
    {
        /** @var Widget $widget */
        return ($widget = optional($this->pivot)->pivotParent)
            ? $widget->partner
            : null;

    }

    public function isIncentive(): bool
    {
        return (bool)$this->incentive;
    }

    public function isRewarding(): bool
    {
        return $this->isIncentive() &&
            (optional($this->getPartner())->isIncentive() || $this->mixin);
    }


}
